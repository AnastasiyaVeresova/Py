import os
os.system("cls")

import cmath

# задача 1 необязательная.
# Пользователь вводит натуральное k. Надо сформировать многочлен такой степени, где все коэффициенты случайные от -10 до 10.

# например, k=2 -> -x^2 + 3*x - 8 = 0
# тут коэффициенты -1,3,-8
# например, k=3 -> 3*x^3 - 2*x = 0
# тут коэффициенты 3,0,-2,0

# задача 2 необязательная.
# Даны два многочлена, которые вводит пользователь. как две строки.
# Задача - сформировать многочлен, содержащий сумму многочленов, и вывести как строку.
# str_one = input('Введите первый многочлен: ')
# str_two = input('Введите второй многочлен: ')


str_one = 5 + 6j
str_two = 11 - 2j
print('Addition =', str_one + str_two)


# for i in str_one:
#     if i.isalpha():
#         tmp = i
# print (tmp)
# for j in str_two:
#     if j.isalpha():
#         tmp2 = j
# print (tmp2)



# str = {str_one} + {str_two} 
# print(str)

# print(f'({str_one.replace("^", "**")}) + ({str_two.replace("^", "**")})')
# print(f'({str_one}) + ({str_two})')

# Степени многочленов могут быть разные.

# например на входе 2x^2 + 4x + 5 = 0 и 5x^3 - 3*x^2 - 12 = 0
# на выходе будет 5x^3 - x^2 + 4х - 7 = 0
# можно использовать модуль re



# Задача 1 необязательная. Напишите рекурсивную программу вычисления арифметического выражения заданного строкой. Используйте операции +,-,/,*. приоритет операций стандартный.

# *Пример:* 

# 2+2 => 4; 

# 1+2*3 => 7; 

# 1-2*3 => -5;

# - Добавьте возможность использования скобок, меняющих приоритет операций.

#     *Пример:* 


#     1+2*3 => 7; 

#     (1+2)*3 => 9;
# Тут может помочь библиотека re

# задача Де моргана необязательная

# Напишите программу для. проверки истинности утверждения ¬(X ⋁ Y ⋁ Z) = ¬X ⋀ ¬Y ⋀ ¬Z для всех значений предикат.

# теперь надо проверить ее практически
# в цикле 100 раз прогоняем
# каждый раз генерируем случайное количество предикат от 3 до 15
# и конечно со случайным булевым значением
# и засекаем общее время выполнения программы
# юзаем библиотеки random и time
# предикаты НЕ ЗАДАЕМ как целое число!

# например, при первом эксперименте количество предикат сгенерировалось равным 4
# тогда получили 4 предикаты со случайным значением [True, False, False, True]
# проверили равенство левой части и правой части теоремы де Моргана применительно к этим предикатам, если все ок, то переходим к другому эксперименту, если теорема нарушается, то вывести всю информацию об этом

# в конце написать сколько времени отработал ваш код.