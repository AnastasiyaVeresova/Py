
import os

os.system("cls")
________________________________________Списки. Кортежи. Словари. Множества

# Списки

sp = [77, 88.88, True, "Hello"]
sp.append(647) #добавит в конец
sp += [1,2] #Кокантенация в конец = sp.extend(1,2)
sp.extend(1,2) #Кокантенация в конец
sp.insert(0, False) # Добавит эл-т False на нужную позицию
print(sp)
print(sp[2:6])
print(sp[-2]) # Обратится к предпоследнему эл-ту
a = sp.pop() #вырежет последний (если задать индекс - вырежет его)
print(a)
del sp[0] # Удалит эл-т по индексу
sp.remove(True) # Удаляет первое вхождение слева - направо по значению
print(sp)
for item in sp:
	print(item) # Выведет все эл-ты по очереди
for i in range(len(sp)): 
	print(sp[i])  # Выведет все эл-ты по очереди, обратится по индексу
for i, value in enumerate(sp): #выведет ключ и значение без скобок друг под другом
	print(i, value)
	
# Кортежи

t1 = tuple(sp) # нельзя менять эл-ты, из списка сделали кортеж
print(t1)
print(t1[0])

# Словари

d = {"Ваня": 89217362453, "Вася": 81119362452}
print(d["Ваня"]) #выведет его тел
d["Сергей"] = 555555 # Добавит Сергея и номер
print(d)
print(d.keys()) # Пройтись по ключам
print(d.values()) # Пройтись по значениям
for key, value in d.items(): #выведет ключ и значение без скобок друг под другом - items возвращает пары
	print(key, value)
	
# Множества - неупорядоченная структура

s = {77,77,77,8,9,11}
s.add(1000) # добавит элемент
s.discard(9) # если такой эл-т есть - удалит
s.remove(9) # удаляет эл-т, а если его нет - выдает ошибку


________________________________________________________________________________
i = 0

def multiple_replace(target_str, replace_values):
    for i, j in replace_values.items():
        target_str = target_str.replace(i, j)
    return target_str

replace_values = {'.': ' ', '-': ' '}

print('Введите текст:') #Жили-БЫЛИ.Ели-пили-пили
text = input()
text1 = multiple_replace(text, replace_values)
text_set = set(text1.lower().split())
#text_set = set(text1.lower().split())
print(text_set)
print(len(text_set))

---->>>>>>

set__________слова хаотично подставлены, подсчет уникальных элементов

Введите текст:
Жили-БЫЛИ.Ели-пили-пили
{'ели', 'жили', 'были', 'пили'}
4

str__________будет по порядку, но слова не уникальны и подсчет всех элементов - букв

Введите текст:
Жили-БЫЛИ.Ели-пили-пили
['жили', 'были', 'ели', 'пили', 'пили']
39

tuple_________будет по порядку, но элементы не уникальны, хотя подсчет слов

Введите текст:
Жили-БЫЛИ.Ели-пили-пили              
('жили', 'были', 'ели', 'пили', 'пили')
5


какой есть способ вывода уникальных значений-слов, сохраняя изначальный порядок набора слов, и при этом с подсчетом количества элементов 



________________________________





import time
import sys
start = time.perf_counter()
# print(start)
# res_ = [i * 2 for i in range(10000000)]  # 0.38088374200015096
res_2 = (i * 2 for i in range(3))  # 0.0000039
# res = []
# for i in range(10000000):
# #     i  # 0.22269944800063968
#     res.append(i * 2)
# print(res)
# 81528048
#      112
print(time.perf_counter() - start)  # 0.7289290859989705
print(sys.getsizeof(res_2))
# print(res_2)
# print(type(res_2))
print('next:', next(res_2))
for j in res_2:
    print(j)
print('next2:', next(res_2))




____________________________

# За день машина проезжает n километров. Сколько дней нужно, чтобы проехать маршрут длиной m километров? При решении этой задачи нельзя пользоваться условной инструкцией if и циклами.

import math

n = int(input("Ведите сколько километров машина проезжает за день: "))
m = int(input("Ведите сколько километров нужно проехать: "))
print (math.ceil(m / n))

----------------------------------------------

distance = int(input('Введите сколько километров машина проезжает за день: '))
day_distance = int(input('Введите сколько нужно проехать километров: '))
days = day_distance // distance + (day_distance % distance > 0)
print(days)

_____________________________________

# В некоторой школе решили набрать три новых математических класса и оборудовать кабинеты
# для них новыми партами. За каждой партой может сидеть два учащихся.
# Известно количество учащихся в каждом из трех классов.
# Выведите наименьшее число парт, которое нужно приобрести для них.
import math

school_class1 = int(input('Ведите количество учеников в 1 классе: '))
school_class2 = int(input('Ведите количество учеников в 2 классе: '))
school_class3 = int(input('Ведите количество учеников в 3 классе: '))

print(math.ceil(school_class1/2) + math.ceil(school_class2/2) + math.ceil(school_class3/2))
print((school_class1 // 2 + school_class1 % 2) + (school_class2 // 2 + school_class2 % 2) + (school_class3 // 2 + school_class3 % 2))
print((school_class1+1)//2 + school_class2//2 + (school_class2 % 2 != 0) + abs(-school_class3//2))


------------------------------------------------

class1 = int(input('Введите количество учеников в первом классе: '))
class2 = int(input('Введите количество учеников во втором классе: '))
class3 = int(input('Введите количество учеников в третьем классе: '))

sum_desk = 0
for i in (class1, class2, class3):
    sum_desk += i // 2 + (i % 2)
print(sum_desk)

_______________________________________________________
# Вагоны в электричке пронумерованы натуральными числами, начиная с 1
# (при этом иногда вагоны нумеруются от «головы» поезда,
#  а иногда – с «хвоста»; это зависит от того, в какую сторону едет электричка). В каждом вагоне написан его номер.
# Витя сел в i-й вагон от головы поезда и обнаружил, что его вагон имеет номер j.
# Он хочет определить, сколько всего вагонов в электричке.
# Напишите программу, которая будет это делать или сообщать,
# что без дополнительной информации это сделать невозможно. Input: 3 4(ввод на разных строках) Output: 6


vag = int(input('Введите номер вагона: '))
current_vag = int(input('Введите номер вагона, в который сел Витя: '))

if vag == current_vag:
    print('Количество вагонов посчитать невозможно')
else:
    print(f'Всего вагонов - {vag + current_vag - 1}')

_________________________________________________________________________

# Дано натуральное число. Требуется определить, является ли год с данным номером високосным.
# Если год является високосным, то выведите YES, иначе выведите NO. Напомним, что в соответствии с григорианским календарем, год является високосным,
# если его номер кратен 4, но не кратен 100, а также если он кратен 400. Input: 2016 Output: YES

year = int(input("Введите год: "))
if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:
    print('yes')
else:
    print('no')

______________________________________________________________________
#  Найдите сумму цифр трехзначного числа.
# 123 -> 6 (1 + 2 + 3) 100 -> 1 (1 + 0 + 0)

n = int(input("Введите трехзначное число "))
digit1 = n // 100
digit2 = (n % 100) // 10
digit3 = n % 10
res = digit1 + digit2 + digit3
print(res)

-----------------------------------------------

n = input("Введите трехзначное число ")
res = 0
for i in n:
    i = int(i)
    res += i
print(res)

------------------------------------------------

n = int(input("Введите трехзначное число "))
res = 0
while n > 0:
    digit = n % 10
    if digit != 0:
        res += digit
    n = n // 10

print(res)

________________________________________

#  Петя, Катя и Сережа делают из бумаги журавликов. Вместе они сделали S журавликов.
# Сколько журавликов сделал каждый ребенок, если известно, что Петя и Сережа сделали одинаковое количество журавликов,
# а Катя сделала в два раза больше журавликов, чем Петя и Сережа вместе?  6 -> 1  4  1           24 -> 4  16  4       60 -> 10  40  10

n = int(input('Введите число журавликов: '))
a = n // 6
b = n // 6
c = (n // 6) * 4
print(a, c, b)

----------------------------------------

n = int(input('Введите число журавликов: '))
c_Petya = n // 6
print(c_Petya, c_Petya * 4, c_Petya)

------------------------------------------

n = int(input('Введите число журавликов: '))
a = int(n / 3 + n / 3)
b = int(a / 4)
c = int(b)

print(b, a, c)
__________________________________________________________
# Требуется определить, можно ли от шоколадки размером n × m долек отломить k долек,
# если разрешается сделать один разлом по прямой между дольками (то есть разломить шоколадку на два прямоугольника)  3 2 4 -> yes 3 2 1 -> no.


n = int(input('Введите n:'))
m = int(input('Введите m:'))
k = int(input('Введите k:'))
if k < m * n and (k % m == 0 or k % n == 0):
    print("yes")
else:
    print("no")

-----------------------------------------------

a = int(input('Введите кол-во долек по длине шоколадки: '))
b = int(input('Введите кол-во долек по ширине шоколадки: '))
c = int(input('Введите сколько прямоугольных долек по линии разлома нужно отломить: '))

if a * b // c == True:
    print("yes")
else:
    print("no")
_____________________________________________________

# Вы пользуетесь общественным транспортом? Вероятно, вы расплачивались за проезд и получали билет с номером.
# Счастливым билетом называют такой билет с шестизначным номером, где сумма первых трех цифр равна сумме последних трех.
# Т.е. билет с номером 385916 – счастливый, т.к. 3+8+5=9+1+6.
# Вам требуется написать программу, которая проверяет счастливость билета. 385916 -> yes 123456 -> no


t = input("Введите номер билета: ")
    
s1 = int(t[0]) + int(t[1]) + int(t[2])
s2 = int(t[3]) + int(t[4]) + int(t[5])
if s1 == s2:
    print('yes')
else:
    print('no')     

---------------------------------------------------

n = input("Введите номер билета: ")
n1 = n // 100000
n2 = (n % 100000) // 10000
n3 = (n % 10000) // 1000
n4 = (n % 1000) // 100
n5 = (n % 100) // 10
n6 = n % 10
if n1 + n2 + n3 == n4 + n5 + n6:
     print('yes')
else:
    print('no')  

-------------------------------------------------

n = input("Введите номер билета: ")
n = str(n)
res = 0
res1 = 0
for i in range(len(n)//2):
    res += int(n[i])
    # res1 += int(n[len(n) - 1 - i])
    res1 += int(n[len(n)//2 + i])
    print(res, res1)
if res == res1:
    print('yes')
else:
    print('no')

_______________________________________________________

# По данному целому неотрицательному n вычислите значение n!. N! = 1 * 2 * 3 * … * N (произведение всех чисел от 1 до N) 0! = 1
# Решить задачу используя цикл while Input:       5 Output:    120

n = int(input("Введите неотрицательное число!\n"))

if not n < 0:
    result = 1
    while n > 1:
        result *= n
        n -= 1
    print(result)
else:
    print("Вы ввели отрицательное число!")

--------------------------------

n = int(input("Введите неотрицательное число!\n"))
i = 1
res = 1
while i <= n:
    res *= i
    i += 1
print(res)

_____________________________________________________
#  На столе лежат n монеток. Некоторые из них лежат вверх решкой, а некоторые – гербом.
# Определите минимальное число монеток, которые нужно перевернуть, чтобы все монетки были повернуты вверх одной и той же стороной.
# Выведите минимальное количество монет, которые нужно перевернуть. 5 -> 1 0 1 1 0 2

-----------------вариант ввода и формирования списка

quantityCoins = int(input("Введите количество монет: "))
import random

coins = []
for i in range(quantityCoins):
    coins.append(random.randint(0, 1))
    print(coins)

--------------решение
sum1 = 0
sum2 = 0
coins = [0, 1, 0, 1, 1, 0]
for i in range(len(coins)):
    if coins[i] == 0:
        sum1 += 1
    elif coins[i] == 1:
        sum2 += 1
print(coins)
if sum1 >= sum2:
    print(f"Нужно перевернуть {sum2} орла (-ов)")
else:
    print(f"Нужно перевернуть {sum1} решек (-у)")

--------------------------------------------------
# Дано натуральное число A > 1. Определите, каким по счету числом Фибоначчи оно является, то есть выведите такое число n, что φ(n)=A.
# Если А не является числом Фибоначчи, выведите число -1. Input:     5 Output:  6

n = int(input("Введите число: "))
a = 1
b = 0
i = 1
fibonacci = 0
count = 0

while i <= n + 1:
    # print(fibonacci, end=" ")
    if fibonacci == n:
        # print(f"\nЧисло {n} по счету на {i} месте")
        break
    fibonacci = a + b
    a = b
    b = fibonacci
    i += 1
else:
    i = -1
print(i)

--------------------------------------------------------------без -1 с проверкой и предложением ближайшего
A = int(input('Введите число: '))
num1, num2, n = 0, 1, 2
while num2 < A:
    num1, num2 = num2, num1 + num2
    n += 1
if num2 == A:
    print (n)
elif num2 - A < A - num1:
    print(f'Да, оно не входит в ряд Фибоначчи, но ближайшее число {num2}')
elif num2 - A > A - num1:
    print(f'Да, оно не входит в ряд Фибоначчи, но ближайшее число {num1}')
else:
    print(f'Да, оно не входит в ряд Фибоначчи, но ближайшие числа {num1} и {num2}')

____________________________________________________________________

# Петя и Катя – брат и сестра. Петя – студент, а Катя – школьница.
# Петя помогает Кате по математике.
# Он задумывает два натуральных числа X и Y (X,Y≤1000), а Катя должна их отгадать.
# Для этого Петя делает две подсказки. Он называет сумму этих чисел S и их произведение P. Помогите Кате отгадать задуманные Петей числа. 4 4 -> 2 2 5 6 -> 2 3

numberX = int(input("Введите число X "))
numberY = int(input("Введите число Y "))
temp = 0
if numberX > numberY:
    temp = numberY
    numberY = numberX
    numberX = temp
if numberX > 1000 or numberY > 1000:
    print("Неверно заданы параметры")
else:
    for x in range(numberX):
        for y in range(numberY):
            if numberX == x + y and numberY == x * y:
                first_num = y
                second_num = x
print(f"{first_num} {second_num}")


--------------------------------------------------------------
sum = (int(input("Сумма чисел: ")))
multiplicate = (int(input("Произведение чисел: ")))
if multiplicate == 0: print(sum, 0)
else:
    for i in range(1, sum // 2 + 1):
        if (multiplicate % i == 0) and (sum - i == multiplicate / i):
            print (i, sum - i, end="\n")

---------------------------------------------Сумма чисел: 5   Произведение чисел: 6  2 3 3 2 

s = int(input("Сумма чисел: "))
m = int(input("Произведение чисел: ")) 
for x in range(s):
    for y in range(s):
        if x + y == s and x * y == m:
            print(x, y, end=' ')

--------------------------------------------------

s = int(input("Сумма чисел: "))
p = int(input("Произведение чисел: ")) 
solutions = []
for i in range(1, 1001):
    for j in range(1, 1001):
        if s == i + j and p == i * j:
            solutions.append((min(i, j), max(i, j)))
solutions = list(set(solutions))

for solution in solutions:
    print(solution[0], solution[1])

___________________________________________________________________________________

# Уставшие от необычно теплой зимы, жители решили узнать, действительно ли это самая длинная оттепель за всю историю наблюдений за погодой.
# Они обратились к синоптикам, а те, в свою очередь, занялись исследованиями статистики за прошлые годы.
# Их интересует, сколько дней длилась самая длинная оттепель.
# Оттепелью они называют период, в который среднесуточная температура ежедневно превышала 0 градусов Цельсия.
# Напишите программу, помогающую синоптикам в работе. Пользователь вводит число N – общее количество рассматриваемых дней (1 ≤ N ≤ 100).
# В следующих строках располагается N целых чисел. Каждое число – среднесуточная температура в соответствующий день.
# Температуры – целые числа и лежат в диапазоне от –50 до 50 Input:    6 -> -20 30 -40 50 10 -10 Output: 2

N = int(input("Введите число N рассматриваемых дней (1 <= N ,= 100): "))
summ = 0
count = 0
#listtemp = [-36, -45, -25, 11, 49, 49]
for i in range(N):
    t = random.randint (-50, 50)

    if t > 0:
        count += 1
    else:
        if count > summ:
            summ = count
        count = 0
    print(t, end=' ')
print()
print(count)
print("Наибольшее количество дней оттепели равно ", summ)

------------------------------------------

n = int(input())
degrees = []
length1 = 0
length2 = 0
for i in range(n):
    degrees.append(int(input()))
for i in degrees:
    if i > 0:
        length1 += 1
    else:
        if length1 > length2:
            length2 = length1 
            length1 = 0
print (length2)

______________________________________________________________________________________
# Требуется вывести все целые степени двойки (т.е. числа вида 2k),
не превосходящие числа N. 10 -> 1 2 4 8

n = int(input("Введите число "))
k = 0
while 2 ** k <= n:
    print(2 ** k, end=' ')
    k += 1

----------------------------

n = int(input("Введите число "))
for x in range(0, n, 1):
    p = 2 ** x
    if p <= n:
        print(p, end=' ')

_________________________________________________________________________________________
# Иван Васильевич пришел на рынок и решил купить два арбуза: один для себя, а другой для тещи.
# Понятно, что для себя нужно выбрать арбуз потяжелей, а для тещи полегче.
# Но вот незадача: арбузов слишком много и он не знает как же выбрать самый легкий и самый тяжелый арбуз?
# Помогите ему! Пользователь вводит одно число N – количество арбузов. Вторая строка содержит N чисел, записанных на новой строчке каждое.
# Здесь каждое число – это масса соответствующего арбуза Input: 5 -> 5 1 6 5 9 Output: 1 9

n = int(input("Введите число арбузов "))
mass_list = []
for i in range(n):
    mass_list.append(random.randint(1, 10))
print(mass_list)
# print(min(mass_list), max(mass_list))
min_ = mass_list[0]
max_ = mass_list[0]
for i in mass_list:
    if i > max_:
        max_ = i
    if i < min_:
        min_ = i
print()
print(min_, max_)

----------------------------------------------------

N = int(input("Введите число арбузов "))
max = 0
min = 999

for i in range(N):
    mass = random.randint(1, 10)
    print(mass, end=' ')
    if mass <= min:
        min = mass
    if mass >= max:
        max = mass
print()
print("Самый тяжелый арбуз весит: ", max)
print("Самый легкий арбуз весит: ", min)

------------------------------------------------------

n = int(input('Введите количество арбузов: '))
watermelon = []
for i in range(n):
    watermelon.append(int(input()))
print(max(watermelon), min(watermelon))

-----------------------------------поиск максимальной последовательности
n = int(input())
degrees = []
length1 = 0
length2 = 0
for i in range(n):
    degrees.append(int(input()))
for i in degrees:
    if i > 0:
        length1 += 1
        if length1 > length2:
            length2 = length1 
        else:
            length1 = 0
print (length2)

___________________________________________________________________
# Требуется вычислить, сколько раз встречается некоторое число X в массиве A[1..N].
# Пользователь в первой строке вводит натуральное число N – количество элементов в массиве.
# В последующих  строках записаны N целых чисел Ai . Последняя строка содержит число X   5       1 2 3 4 5        3-> 1


N = int(input('Введите количество элементов в массиве: '))
list_N = input('Введите элементы списка через пробел: ').split()
array = list(map(int, list_N))
x = int(input('Введите число x: '))
count = 0
for i in range(N):
    if array[i] == x:
        count += 1
print(f'Число {x} встречается в списке {count} раз(-а)')

___________________________________________________________________________________________________
# Дан список чисел. Определите, сколько в нем встречается различных чисел. Input: [1, 1, 2, 0, -1, 3, 4, 4] Output: 6
# Примечание: Пользователь может вводить значения списка или список задан изначально.   5      1 2 3 4 5      6-> 5

# list_num = [1, 1, 2, 0, -1, 3, 4, 4]
# print(len(set(list_num)))
# print(set(list_num))
# from random import randint

list_num = [1, 1, 2, 0, -1, 3, 4, 4]

count = 0
new_list = []
for i in list_num:
    if i not in new_list:
        new_list.append(i)
print(len(new_list))
print(new_list)

------------------------------------------------------------------
digits = [1, 1, 2, 0, -1, 3, 4, 4]
print(len(set(digits)))
______________________________________________________________________________________________
# Требуется найти в массиве A[1..N] самый близкий по величине элемент к заданному числу X.
# Пользователь в первой строке вводит натуральное число N – количество элементов в массиве.
# В последующих  строках записаны N целых чисел Ai . Последняя строка содержит число X


N = int(input('Введите количество элементов в массиве: '))
list_1 = []
for i in range(N):
    list_1.append(int(input('Введите следующий  элемент: ')))
array = list(map(int, list_1))
print(array)
x = int(input('Введите число x: '))

count = 0
max = list_1[0]
min = list_1[0]
for i in range(len(list_1)):
    if list_1[i] == x:
        print(list_1[i])
if list_1[i] == x - 1:
    print(list_1[i])
elif list_1[i] == x + 1:
     print(list_1[i])

_________________________________________________________________________________________
# Дана последовательность из N целых чисел и число K. Необходимо сдвинуть всю последовательность
(сдвиг - циклический) на K элементов вправо,
# K – положительное число. Input:   [1, 2, 3, 4, 5] k = 3 Output:  [4, 5, 1, 2, 3]
# Примечание: Пользователь может вводить значения списка или список задан изначально.

sp = [1, 2, 3, 4, 5]
k = 2
for i in range(k):
    x = sp.pop()
    sp.insert(0, x)
print(sp)

----------------------------------------------------

list_num = [1, 2, 3, 4, 5]
k = 3
print(list_num[k:] + list_num[:k])


_____________________________________________________________________________________________________
#  В настольной игре Скрабл (Scrabble) каждая буква имеет определенную ценность.
# В случае с английским алфавитом очки распределяются так:
# ● A, E, I, O, U, L, N, S, T, R – 1 очко;
# ● D, G – 2 очка; ● B, C, M, P – 3 очка;
# ● F, H, V, W, Y – 4 очка; ● K – 5 очков;
# ● J, X – 8 очков;
# ● Q, Z – 10 очков.
# А русские буквы оцениваются так:
# ● А, В, Е, И, Н, О, Р, С, Т – 1 очко;
# ● Д, К, Л, М, П, У – 2 очка;
# ● Б, Г, Ё, Ь, Я – 3 очка; ● Й, Ы – 4 очка;
# ● Ж, З, Х, Ц, Ч – 5 очков;
# ● Ш, Э, Ю – 8 очков;
# ● Ф, Щ, Ъ – 10 очков.
# Напишите программу, которая вычисляет стоимость введенного пользователем слова. Будем считать, что на вход подается только одно слово,
# которое содержит либо только английские, либо только русские буквы.    Ввод: ноутбук Вывод: 12


k = 'ноутбукъ'

# Введите ваше решение ниже
one_point = {'A', 'E', 'I', 'O', 'U', 'L', 'N', 'S', 'T', 'R', 'А', 'В', 'Е', 'И', 'Н', 'О', 'Р', 'С', 'Т'} #1
two_points = {'D', 'G', 'Д', 'К', 'Л', 'М', 'П', 'У'} #2
three_points = {'B', 'C', 'M', 'P', 'Б', 'Г', 'Ё', 'Ь', 'Я'} #3
four_points = {'F', 'H', 'V', 'W', 'Y', 'Й', 'Ы'} #4
five_points = {'K', 'Ж', 'З', 'Х', 'Ц', 'Ч'} #5
eight_points = {'J', 'X', 'Ш', 'Э', 'Ю'} #8
ten_points = {'Q', 'Z', 'Ф', 'Щ', 'Ъ'} #10
total_points = 0

user_list = list()
for el in k:
    user_list.append(el.upper())
    

for i in user_list:
    if i in one_point: total_points += 1
    elif i in two_points: total_points += 2
    elif i in three_points: total_points += 3
    elif i in four_points: total_points += 4
    elif i in five_points: total_points += 5
    elif i in eight_points: total_points += 8
    elif i in ten_points: total_points += 10
    else: total_points += 0
    
print(total_points)

____________________________________________________________________________
# Напишите программу для печати всех уникальных значений в словаре.
# Input:  [{"V": "S001"}, {"V": "S002"}, {"VI": "S001"}, {"VI": "S005"}, {"VII": " S005 "}, {" V ":" S009 "}, {" VIII ":" S007 "}]
# Output: {'S005', 'S002', 'S007', 'S001', 'S009'}
# Примечание: Список словарей задан изначально. Пользователь его не вводит


sp = [{"V": "S001"}, {"V": "S002"}, {"VI": "S001"}, {"VI": "S005"}, {"VII": " S005 "}, {" V ":" S009 "}, {" VIII ":" S007 "}]
unic = set()
for i in sp:
    for j in i:
        unic.add(i[j].strip())
    # unic.update(i.values()) #вернет уникальные значения
print(unic)

---------------------------------------------------------------------------------------

dictionary = [{"V": "S001"}, {"V": "S002"}, {"VI": "S001"}, {"VI": "S005"}, {"VII": " S005 "}, {" V ":" S009 "}, {" VIII ":" S007 "}]
list_ = []

for i in dictionary:
    for j in i:
        if i[j].strip() not in list_:
            list_.append(i[j].strip())
print("Вот все уникальные значения, которые есть в словаре: ", list_)

______________________________________________________________________________________________

# Даны два неупорядоченных набора целых чисел (может быть, с повторениями).
# Выдать без повторений в порядке возрастания все те числа, которые встречаются в обоих наборах.
# Пользователь вводит 2 числа. n - кол-во элементов первого множества. m - кол-во элементов второго множества.
# Затем пользователь вводит сами элементы множеств.
# 11 6
# 2 4 6 8 10 12 10 8 6 4 2
# 3 6 9 12 15 18
# 6 12

# -------------------------функция сортировки
def selection_sort(nums):
    for i in range(len(nums)):
        min = i
        for k in range(i + 1, len(nums)):
            if nums[k] < nums[min]:
                min = k
        nums[i], nums[min] = nums[min], nums[i]


-------------------------решение для рандомных чисел
import random

n = int(input('Введите кол-во элементов первого множества: '))
m = int(input('Введите кол-во элементов первого множества: '))

list_1 = []
for i in range(n):
    list_1.append(random.randint(-5, 5))
print(list_1)

res = set(list_1)
print(res)

list_2 = []
for i in range(m):
    list_2.append(random.randint(-5, 5))
print(list_2)

res2 = set(list_2)
print(res2)


number_intersection = res.intersection(res2)
list_itog = list(number_intersection)

selection_sort(list_itog)

print()
print(*list_itog)

----------------------для ввода пользователем через пробел

n = int(input('Введите кол-во элементов первого множества: '))
m = int(input('Введите кол-во элементов второго множества: '))

# if n == n:
#     for i in range(n):
#         print('Введите через пробел элементы первого множества')
#         list_n = input(f'{n} элементов(-а): ').split()
#         print(list_n[0:n])
# elif n != n:
#     print(f'Вы ввели меньше {n} элементов(-а): ')
#     print('Введите через пробел элементы первого множества')
#     list_n = input(f'{n} элементов(-а): ').split()
print('Введите через пробел элементы второго множества')
list_n = input(f'{n} элементов(-а): ').split()
print(list_n[0:m])

print('Введите через пробел элементы второго множества')
list_m = input(f'{n} элементов(-а): ').split()
print(list_m[0:m])

list_1 = set(list_n)
list_2 = set(list_m)

number_intersection = list_1.intersection(list_2)

print(*number_intersection)
sort_number = list(number_intersection)
selection_sort(sort_number)

print()
print(*sort_number)

---------------------------------------------------------------------------------для автотеста
def selection_sort(nums):
    for i in range(len(nums)):
        min = i
        for k in range(i + 1, len(nums)):
            if nums[k] < nums[min]:
                min = k
        nums[i], nums[min] = nums[min], nums[i]

var1 = '5 4'
var2 = '1 3 5 7 9' # элементы первого множества через пробел
var3 = '2 3 4 5' # элементы второго множества через пробел
n = set()
v2 = set(var2)
v3 = set(var3)
n = v2.intersection(v3)
n = list(n)
selection_sort(n)
print(*n)

---------------------------------------

new_list = []
for i in var1[1:]:
    for i in var2:
        if i in var3:
            new_list.append(i)
for i in var1[:2]:
    for i in var3:
        if i in var2:
           new_list.append(i)
new_list = set(new_list)
new_list = list(new_list)
selection_sort(new_list)
print(*new_list)

--------------------------------------------------Марат
n = int(input('Введите кол-во элементов первого множества: '))

# можно так:
# list_n = []
# for i in range(n):
#     list_n.append(int(input(f'Введите элемент N{i + 1} первого множества: ')))
# print(list_n)

# или так:
print('Введите через пробел элементы первого множества')
list_n_2 = input(f'{n} элементов(-а): ').split()
for idx in range(len(list_n_2)):
    list_n_2[idx] = int(list_n_2[idx])
print(list_n_2)
if n != len(list_n_2):
    print(f'Вы ввели не {n} элементов(-а)')


_______________________________________________________________________________________
# Дан массив, состоящий из целых чисел.
# Напишите программу, которая подсчитает количество элементов массива, больших предыдущего (элемента с предыдущим номером)
# Input: [0, -1, 5, 2, 3] Output: 2 (-1 < 5, 2 < 3)
# Примечание: Пользователь может вводить значения списка или список задан изначально.

user_num =  [0, -1, 5, 2, 3]
count = 0
for i in range(1, len(user_num)):
    if user_num[i] > user_num[i - 1]:
        count += 1
print("Количество эл-в больше предыдущего: ", count)

------------------------------------------------------
user_num =  [0, -1, 5, 2, 3]
count = 0
for i in range(len(user_num) - 1):
    if user_num[i] < user_num[i + 1]:
        count += 1
print(count)

____________________________________________________________________________________________________
# В фермерском хозяйстве в Карелии выращивают чернику.
# Она растет на круглой грядке, причем кусты высажены только по окружности.
# Таким образом, у каждого куста есть ровно два соседних. Всего на грядке растет N кустов.
# Эти кусты обладают разной урожайностью, поэтому ко времени сбора на них выросло различное число ягод –
# на i-ом кусте выросло ai ягод. В этом фермерском хозяйстве внедрена система автоматического сбора черники.
# Эта система состоит из управляющего модуля и нескольких собирающих модулей.
# Собирающий модуль за один заход, находясь непосредственно перед некоторым кустом, собирает ягоды с этого куста
# и с двух соседних с ним. Напишите программу для нахождения максимального числа ягод,
# которое может собрать за один заход собирающий модуль,
# находясь перед некоторым кустом заданной во входном файле грядки.
# 4 -> 1 2 3 4
# 9


# bush = 11
# berries = [8, 2, 15, 34, 65, 6, 7, 8, 9, 19, 11]

# bush = 4
# berries = [1, 2, 3, 4]

bush = int(input('Введите количество кустов: '))
berries = []
for i in range(bush):
    berries.append(random.randint(1, 10))
print(berries)
new_list = []

for i in range (bush):
    while i < (len(berries)):
        sum = berries[i - 1] + berries[i] + berries[i - 2]
        for i in range (sum):
            if i == 0:
                new_list.append(sum)
                
# for i in new_list:
#     max_berries = new_list[0]
#     if i > max_berries:
#         max_berries, i = i, max_berries

max_berries = max(new_list)

print()
print(*new_list) 
print(max_berries)

---------------------------------------------------

bush = 11
# создание списка berries
berries = []
for i in range(bush):
    berries.append(random.randint(1, 10))
print(berries)

# создание списка new_list - список сумм ягод с 3-х кустов
new_list = []
for i in range(len(berries)):
    print(f'{i = }')
    print(f'{berries[i - 2] = }')
    print(f'{berries[i - 1] = }')
    print(f'{berries[i] = }')
    sum_ = berries[i - 1] + berries[i] + berries[i - 2]
    new_list.append(sum_)
    print(sum_)
    print('*' * 15)

print(*new_list)
# функция max() находит максимум в списке new_list
print(max(new_list))

------------------------------------------------------------------------Марат

bush = 11
# создание списка berries
berries = []
for i in range(bush):
    berries.append(random.randint(1, 10))
print(berries)

# создание списка new_list - список сумм ягод с 3-х кустов
new_list = []
for i in range(len(berries)):
    print(f'{i = }')
    print(f'{berries[i - 2] = }')
    print(f'{berries[i - 1] = }')
    print(f'{berries[i] = }')
    sum_ = berries[i - 1] + berries[i] + berries[i - 2]
    new_list.append(sum_)
    print(sum_)
    print('*' * 15)

print(*new_list)
# функция max() находит максимум в списке new_list
print(max(new_list))

__________________________________________________________________________

# Напишите программу, которая принимает на вход строку, и отслеживает,
# сколько раз каждый символ уже встречался.
# Количество повторов добавляется к символам с помощью постфикса формата _n.
# Input: a a a b c a a d c d d
# Output: a a_1 a_2 b c a_3 a_4 d c_1 d_1 d_2
# Для решения данной задачи используйте функцию .split()

strint_part = "a a a b c a a d c d d"
sting_array = strint_part.split()
string_dict = dict()
zero = ""
for i in sting_array:
    if i in string_dict:
        string_dict[i] += 1
        zero += f"{i}_{string_dict[i]} "
    else:
        string_dict[i] = 0
        zero += f"{i} "
print(strint_part)
print(zero)

-------------------------------------------------------------------------------
input_list = "a a a b c a a d c d d"
user_list = input_list.split()

result_list = []

for i in range(len(user_list)):
    tmp = user_list[:i].count(user_list[i])
    if tmp >= 1:
        result_list.append(f'{user_list[i]}_{tmp}')
    else:
        result_list.append(user_list[i])
    
print(input_list)
print(" ".join(result_list))

________________________________________________________________________________________
#  Напишите программу, которая на вход принимает два числа A и B, и возводит число А в целую степень B
с помощью рекурсии. A = 3; B = 5 -> 243 (3⁵)      A = 2; B = 3 -> 8

a = 3
b = 5
def f(a, b):
    return a ** b

print(f(a, b))

___________________________________________________________________________________________________

# Пользователь вводит текст(строка).
# Словом считается последовательность непробельных символов идущих подряд,
# слова разделены одним или большим числом пробелов.
# Определите, сколько различных слов содержится в этом тексте.
# Input: She sells sea shells on the sea shore The shells that she sells are sea shells
# I'm sure.So if she sells sea shells on the sea shore
# I'm sure that the shells are sea shore shells
# Output: 13

import os
os.system("cls")

s = '''She sells sea shells on the sea shore The shells
that she sells are sea shells I'm sure.So if she sells sea
shells on the sea shore I'm sure that the shells are sea
shore shells'''

# # s_list = set(s.lower().replace('sure.so', 'sure so').replace('i\'m', 'i am').split())
# # print(s_list)
# # print(len(s_list))

# def multiple_replace(target_str, replace_values):
#     for i, j in replace_values.items():
#         target_str = target_str.replace(i, j)
#     return target_str

# replace_values = {'.': ' ', '-': ' '}

# print('Введите текст:') #Жили-БЫЛИ.Ели-пили-пили
# text = input()
# text1 = multiple_replace(text, replace_values)
# text_set = set(text1.lower().split())
# print(text_set)
# print(len(text_set))


# ---------------------------------------------------------------

list_string = s.replace(".", " ").lower().split()
print(s)
print(len(set(list_string)))

___________________________________________________________________________________________
#  Напишите рекурсивную функцию sum(a, b), возвращающую сумму двух целых неотрицательных чисел. Из всех арифметических операций допускаются только +1 и -1. Также нельзя использовать циклы. 2 2  4

a = 3
b = 5

def sum(a, b):
    a += 1
    b -= 1
    if b > 0:
        return sum(a, b)
    else:
        return a
    
print(sum(a, b))

----------------------------------------------------------------
def sum(a, b):
    if a == 0:
        return b
    elif b == 0:
        return a
    else:
        return sum(a + 1, b - 1)
print(sum(a, b))


___________________________________________________________________________________
# “Задана последовательность неотрицательных целых чисел.
# Требуется определить значение наибольшего элемента последовательности,
# которая завершается первым встретившимся нулем (число 0 не входит в последовательность)”.


from random import randint
sequence = []
def build_seq():
    sequence = [randint(0,10) for _ in range(20)]
    while (sequence[0] == 0 and len(sequence) > 0):
        sequence = sequence[1:]
    return sequence

while(len(sequence) == 0):
   sequence = build_seq()

sequence.insert(randint(1,len(sequence)),0)
maxnumber = 0
for i in sequence:
    if i == 0:
        break
    elif(maxnumber<i):
        maxnumber = i

print(sequence)
print(maxnumber)

-----------------------------------------------------------------------

import random
sequence = [random.randint(0,20) for _ in range(10)]
print(sequence)
max_value = 0 
found_zero = False

for num in sequence:
    if sequence[0] == 0:
        print("0 находится на 1 месте в последовательности, максимального числа до него нет")
        found_zero = True
        break
    if num == 0:
        print("Наибольшее значение, завершающееся первым встретившимся нулем:", max_value)
        found_zero = True
        break
    elif num > max_value:
        max_value = num

if found_zero == False:
    print("В последовательности нет нуля")

__________________________________________________________________________________> Рекурсия
# Задача №31. Последовательностью Фибоначчи называется
# последовательность чисел a0, a1, ..., an, ..., где
# a0 = 0,
# a1 = 1,
# ak = ak-1 + ak-2 (k > 1).
# # Требуется найти N-е число Фибоначчи
# Input: 7
# Output: 21
# Задание необходимо решать через рекурсию


def fib(n):
    if n in (0, 1):  # a0 = 0 a1 = 1
        return n
    return fib(n - 1) + fib(n - 2)

print(fib(int(input("Введите номер числа Фибоначчи: "))))

-----------------------------------------------

def fib(n):
    if n in (1, 2):
        return n-1
    return fib(n-1)+ fib(n-2)

def str_fib(n):
    res =""
    for i in range(1, n+1):
        res += f'{fib(i)} '
    return res

n= int(input("Введите номер числа Фибоначчи: "))
print(fib(n))
print(str_fib(n))


_____________________________________________________
# Задача №33. Хакер Василий получил доступ к классному журналу и
# хочет заменить все свои минимальные оценки на максимальные. Напишите программу, которая
# заменяет оценки Василия, но наоборот: все максимальные – на минимальные.
# Input: 5 -> 1 3 3 3 4
# Output: 1 3 3 3 1

def grades_correction (array, i, max_num):
    if i == -1:
        return
    if array[i] == max_num:
        array[i] = min(array)
    return grades_correction(array, i - 1, max_num)

array = [1, 3, 3, 3, 4]
grades_correction(array, len(array)-1, max(array))

print(*array)

-------------------------------------------------------
vas_marks = [1, 3, 3, 3, 4]

def reduce_marks(array):
    return [min(array) if i == max(array) else i for i in array]

print(reduce_marks(vas_marks))

------------------------------------------

vas_marks = [1, 3, 3, 3, 4]
print([min(vas_marks) if i == max(vas_marks) else i for i in vas_marks])

---------------------------------------------------
def grades_correction (array, i, max_num):
    if i == -1:
        return
    if array[i] == max_num:
        array[i] = min(array)
    return grades_correction (array, i - 1, max_num)

array = [1, 3, 3, 3, 4]
grades_correction(array, len(array)-1, max(array))
print(array) #он убирает скобки и запятые
print(*array)

_______________________________________________________________________
# Напишите функцию, которая принимает одно число и проверяет, является ли оно простым Напоминание:
Простое число - это число, которое имеет 2 делителя: 1  и n(само число) Input: 5 Output: yes

n = int(input('Input number: '))

def simple_num(num):
    if num <= 1:
        return 'no'
    nums = [i for i in range(1,num)]
    result = [i for i in nums if num % i == 0]
    if len(result) >= 2:
        return 'No'
    else:
        return 'Yes'

print(simple_num(n))

________________________________________________________________________________________
# Дано натуральное число N и последовательность из N элементов. Требуется вывести эту последовательность в обратном порядке.
Примечание. В программе запрещается объявлять массивы и использовать циклы (даже для ввода и вывода). Input:    2 -> 3 4 Output: 4 3

def rec(n):
    if n == 0:
        return ''
    x = int(input("Введите число: "))
    return rec(n - 1) + f' {x}'


n = int(input("Введите кол-во чисел: "))
print(rec(n))

---------------------------------------------------------------------------------------------------
def reverse_num(n, numbers):
    if n == 0:
        return
    print(numbers[n-1], end= " ")
    return reverse_num(n-1, numbers)

reverse_num(4, [1, 3, 4, 5])

----------------------------------------------------------------------------------

num = 5

def reverse_output(n, x = None):
    if n > 0:
        x = input("Введите число: ")
        reverse_output(n - 1)
    if x != None:
        print(x, end=" ")

reverse_output(num)
--------------------------------------------------------

import random

# получить список квадратов нечетных значений списка на входе
def square_even(sp):
    result =[]
    for item in sp:
        if item % 2:
            result.append(item**2)
    return result


sp = [1,5,4,6,8,9,7,8,9,10]
print(square_even(sp))
print([item**2  for item in sp if item %2 ])
print([item**2 if item % 2 else 0 for item in sp ])
print(sum([item**2  for item in sp if item %2 ]))

print({i: sp.count(i) for i in set(sp)})

___________________________

Генератор рандомный
sp = [random.randint(1,10) for _ in range(15)]
print(sp)

__________________________________________________________


39. Даны два массива чисел. Требуется вывести те элементы
первого массива (в том порядке, в каком они идут в первом
массиве), которых нет во втором массиве. Пользователь вводит
число N - количество элементов в первом массиве, затем N
чисел - элементы массива. Затем число M - количество
элементов во втором массиве. Затем элементы второго массива
Ввод: Вывод:
7 3 3 2 12
3 1 3 4 2 4 12
6
4 15 43 1 15 1

import random

print(sp:=[random.randint(1,10) for _ in range(10)])
print(sp1:=[random.randint(1,10) for _ in range(5)])
sp1 = set(sp1)
result = []
for i in sp:
    if i not  in sp1:
        result.append(i)
print(result)
print(result2:=[i for i in sp if i not in set(sp1)])

-------------------------------------------------------------------
def filter_list(array1, array2):
    res_array = []
    for i in array1:
        if i not in array2:
            res_array.append(i)
    return res_array

def create_random_list(number):
    return [random.randint(-10,10) for _ in range(number+1)]

number_1 = int(input("Введите количество элементов первого массива: "))
int_array_1 = create_random_list(number_1)
print(int_array_1)
number_2 = int(input("Введите количество элементов второго массива: "))
int_array_2 = create_random_list(number_2)
print(int_array_2)
print(filter_list(int_array_1, int_array_2))

________________________________________________________________________
# Дан массив, состоящий из целых чисел. Напишите программу, которая в данном массиве определит количество элементов,
у которых два соседних и, при этом, оба соседних элемента меньше данного. Сначала вводится число N — количество элементов в массиве
Далее записаны N чисел — элементы массива. Массив состоит из целых чисел.
Ввод: Ввод: 5 5 1 2 3 4 5 1 5 1 5 1 Вывод: Вывод: 0 2 (каждое число вводится с новой строки)

41. import random
# sp = [1,2,3,4,5]
print(sp:=[random.randint(1,10) for _ in range(10)])
count = 0
for i in range(len(sp)):
    if sp[i] > sp[i-1] and sp[i] > sp[(i+1)%len(sp)]:
        count +=1
print(count)
print(sum([1 if sp[i] > sp[i-1] and sp[i] > sp[(i+1)%len(sp)] else 0 for i in range(len(sp))]))
print(sum([1 for i in range(len(sp)) if sp[i] > sp[i-1] and sp[i] > sp[(i+1)%len(sp)]]))

-----------------------------------------------------------------

list1= [5, 7, 3, 4, 5]
list2= [1, 5, 1, 5, 1]
def sort(list1):
    count= 0    
    for i in range(1, len(list1)-1):
        if list1[i-1] < list1[i] and list1[i]> list1[i+1]:
            count += 1
    return count
print(sort(list1))
print(sort(list2))

_________________________________________________________________________________________

Задача №43. Решение в группах
Дан список чисел. Посчитайте, сколько в нем пар
элементов, равных друг другу. Считается, что любые
два элемента, равные друг другу образуют одну пару,
которую необходимо посчитать. Вводится список
чисел. Все числа списка находятся на разных
строках.
Ввод: 1 2 3 2 3                   Вывод: 2

import random

# print(sp:=[random.randint(1,10) for _ in range(6)])
sp = [9, 4, 4, 7, 5, 3, 8, 5, 5, 5, 5, 5]
print (sp)
counter = 0
for i in set(sp):
    counter += sp.count(i) // 2
print(counter)
print(sum([sp.count(i) // 2 for i in set(sp)]))

------------------------------------------------------------------------------------
import random

def create_random_list(num):
    return [random.randint(0, 2) for _ in range(num)]

def find_couple(_user_list_: list):
    count_of_couple = 0
    for i in set(_user_list_):
        count_of_couple += _user_list_.count(i) // 2
    return count_of_couple

len_list = int(input("Введите длину массива: "))

user_array = create_random_list(len_list)

print(user_array)
print(find_couple(user_array))
_______________________________________________________________________________________
Два различных натуральных числа n и m называются
дружественными, если сумма делителей числа n
(включая 1, но исключая само n) равна числу m и
наоборот. Например, 220 и 284 – дружественные числа.
По данному числу k выведите все пары дружественных
чисел, каждое из которых не превосходит k. Программа
получает на вход одно натуральное число k, не
превосходящее 105
. Программа должна вывести все
пары дружественных чисел, каждое из которых не
превосходит k. Пары необходимо выводить по одной в
строке, разделяя пробелами. Каждая пара должна быть
выведена только один раз (перестановка чисел новую
пару не дает).
Ввод: 300     Вывод: 220   284

def sum_of_numbers(n):
    summa = 0
    for i in range(1, n):
        if n % i == 0:
            summa += i
    return summa

n = int(input("Input number: "))
result = []
for i in range(n + 1):
    y = sum_of_numbers(i)
    #Список делителей для 220: 1, 2, 4, 5, 10, 11, 20, 22, 44, 55 и 110, — 
    #их сумма равна 284. мы сделали это
    if sum_of_numbers(y) == i and i > y:
        result.append((i, y))
print(*result)

print([(i, sum_of_numbers(i)) for i in range(n + 1) if sum_of_numbers(sum_of_numbers(i)) == i and sum_of_numbers(i) > i])

-------------------------------------------------------------------

def sum_div(_num_):
    sum = 0
    for i in range(1, _num_ // 2 + 1):
        if _num_ % i == 0:
            sum += i
    return sum

def main():
    user_num = 100001
    while user_num > 100000:
        user_num = int(input("Введите предельное число: "))
        result_list = []
        for i in range(1, user_num):
            sum1 = sum_div(i)
            sum2 = sum_div(sum1)
            if i == sum2 and i != sum1:
                if {sum1, i} in result_list:
                    continue
                result_list.append({sum1, i})
        return result_list

print(main())

_____________________________________________________

# У вас есть код, который вы не можете менять (так часто бывает, когда код в глубине программы используется множество раз и вы не хотите ничего сломать): 
# transformation = <???> values = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29] # или любой другой список
# transormed_values = list(map(transformation, values)) Единственный способ вашего взаимодействия с этим кодом - посредством задания функции transformation. 
# Однако вы поняли, что для вашей текущей задачи вам не нужно никак преобразовывать список значений, а нужно получить его как есть. 
# Напишите такое лямбда-выражение transformation, чтобы transformed_values получился копией values.
# Пример ввода и вывода данных представлены на следующем слайде 20 минутСеминар 
# 7. Функции высшего порядка Задача №47.
# Решение в группах Ввод: values = [1, 23, 42, ‘asdfg’] transformed_values = list(map(trasformation, values)) if values == transformed_values:    print(‘ok’) else:    print(‘fail’) Вывод: ok

values = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29] 
print(values)
transormed_values = list(map(lambda x: x * 1, values))
print(transormed_values)

________________________________________________________________________________


                             
